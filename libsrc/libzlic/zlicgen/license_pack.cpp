// ***************************************************************
//  license_pack
//  ---------------------------------------------------------------
//  This file was generated by zgen, don't manually modify.
//  Yongming Wang(wangym@gmail.com)
//  Copyright (C) 2024 - All Rights Reserved
// *****************************************************************

#include "license.h"
#include "license_proto.h"
#include "license_pack.h"
#include "zce/zds_schema.h"

using namespace zdp;
zlicense::name_value_t zlicense::name_value_t::_empty;
int zdp::zds_pack(zce_byte* buf, int size, const zlicense::name_value_t& _t, zds_context_t* ctx, bool has_prefix)
{
    int len = 0, ret = 0;
    zce_uint64 _struct_prefix = 0;
    if (!_t.name.empty()) _struct_prefix |= 1ull << 0; 
    if (!_t.value.empty()) _struct_prefix |= 1ull << 1; 
    len = zds_pack_struct_header(buf, size, _struct_prefix, ctx, has_prefix);
    CHECKLEN_MOVEBUF_ADDRET_DECSIZE;

    if (_struct_prefix & (1ull << 0)) {
        len = zds_pack_builtin(buf, size, _t.name, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 1)) {
        len = zds_pack_builtin(buf, size, _t.value, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    return ret;
}

int zdp::zds_unpack(zlicense::name_value_t& _t, const zce_byte* buf, int size, zds_context_t* ctx, bool has_prefix)
{
    int len = 0, ret = 0;
    zce_uint64 _struct_prefix = 0;
    len = zds_unpack_struct_header(_struct_prefix, buf, size, ctx, has_prefix);
    CHECKLEN_MOVEBUF_ADDRET_DECSIZE;

    if (_struct_prefix & (1ull << 0)) {
        len = zds_unpack_builtin(_t.name, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 1)) {
        len = zds_unpack_builtin(_t.value, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    _struct_prefix >>= 2;
    while (_struct_prefix != 0) {
        if (_struct_prefix & 1) {
            len = zds_unpack_skip(buf, size, ctx);
            CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
        }
        _struct_prefix >>= 1;
    };
    return ret;
}

zlicense::license_t zlicense::license_t::_empty;
int zdp::zds_pack(zce_byte* buf, int size, const zlicense::license_t& _t, zds_context_t* ctx, bool has_prefix)
{
    int len = 0, ret = 0;
    zce_uint64 _struct_prefix = 0;
    if (!_t.app.empty()) _struct_prefix |= 1ull << 0; 
    if (!_t.vecmac.empty()) _struct_prefix |= 1ull << 1; 
    if (!_t.vechd.empty()) _struct_prefix |= 1ull << 2; 
    if (_t.expire != 0) _struct_prefix |= 1ull << 3; 
    if (!_t.nv.empty()) _struct_prefix |= 1ull << 4; 
    len = zds_pack_struct_header(buf, size, _struct_prefix, ctx, has_prefix);
    CHECKLEN_MOVEBUF_ADDRET_DECSIZE;

    if (_struct_prefix & (1ull << 0)) {
        len = zds_pack_builtin(buf, size, _t.app, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 1)) {
        len = zds_pack_builtin(buf, size, _t.vecmac, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;

    };
    if (_struct_prefix & (1ull << 2)) {
        len = zds_pack_builtin(buf, size, _t.vechd, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;

    };
    if (_struct_prefix & (1ull << 3)) {
        len = zds_pack_builtin(buf, size, _t.expire, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;

    };
    if (_struct_prefix & (1ull << 4)) {
        len = zds_pack_array(buf, size, _t.nv, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    return ret;
}

int zdp::zds_unpack(zlicense::license_t& _t, const zce_byte* buf, int size, zds_context_t* ctx, bool has_prefix)
{
    int len = 0, ret = 0;
    zce_uint64 _struct_prefix = 0;
    len = zds_unpack_struct_header(_struct_prefix, buf, size, ctx, has_prefix);
    CHECKLEN_MOVEBUF_ADDRET_DECSIZE;

    if (_struct_prefix & (1ull << 0)) {
        len = zds_unpack_builtin(_t.app, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 1)) {
        len = zds_unpack_builtin(_t.vecmac, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 2)) {
        len = zds_unpack_builtin(_t.vechd, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 3)) {
        len = zds_unpack_builtin(_t.expire, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 4)) {
        len = zds_unpack_array(_t.nv, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    _struct_prefix >>= 5;
    while (_struct_prefix != 0) {
        if (_struct_prefix & 1) {
            len = zds_unpack_skip(buf, size, ctx);
            CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
        }
        _struct_prefix >>= 1;
    };
    return ret;
}

