// ***************************************************************
//  rpcdemo_proto
//  ---------------------------------------------------------------
//  This file was generated by zgen, don't manually modify.
//  Yongming Wang(wangym@gmail.com)
//  Copyright (C) 2024 - All Rights Reserved
// *****************************************************************

#pragma once

#include "rpcdemo_inc.h"
#include <zce/zce_config.h>
#include <zce/zce_object.h>
#include <zce/zce_types.h>
#include <zce/zce_any.h>

namespace rpcdemo
{
    struct zds_context_t;
    struct ArgsMixed
    {
        static ArgsMixed _empty;

        bool operator==(const ArgsMixed& _t) const noexcept
        {
            if (anyVal != _t.anyVal) return false;
            if (i8Val != _t.i8Val) return false;
            if (i8ValVec != _t.i8ValVec) return false;
            if (i16Val != _t.i16Val) return false;
            if (i16ValVec != _t.i16ValVec) return false;
            if (i32Val != _t.i32Val) return false;
            if (i32ValVec != _t.i32ValVec) return false;
            if (i64Val != _t.i64Val) return false;
            if (i64ValVec != _t.i64ValVec) return false;
            if (fltVal != _t.fltVal) return false;
            if (fltValVec != _t.fltValVec) return false;
            if (dblVal != _t.dblVal) return false;
            if (dblValVec != _t.dblValVec) return false;
            if (strVal != _t.strVal) return false;
            return true;
        }

        zce_any    anyVal;
        zce_char    i8Val;
        std::vector<zce_char> i8ValVec;
        zce_int16    i16Val;
        std::vector<zce_int16> i16ValVec;
        zce_int32    i32Val;
        std::vector<zce_int32> i32ValVec;
        zce_int64    i64Val;
        std::vector<zce_int64> i64ValVec;
        zce_float    fltVal;
        std::vector<zce_float> fltValVec;
        zce_double    dblVal;
        std::vector<zce_double> dblValVec;
        zce_astring strVal;
    };
    struct ArgsDeepMixed
    {
        static ArgsDeepMixed _empty;

        bool operator==(const ArgsDeepMixed& _t) const noexcept
        {
            if (ui8Val != _t.ui8Val) return false;
            if (ui8ValVec != _t.ui8ValVec) return false;
            if (ui16Val != _t.ui16Val) return false;
            if (ui16ValVec != _t.ui16ValVec) return false;
            if (!(tMixed == _t.tMixed)) return false;
            if (ui32Val != _t.ui32Val) return false;
            if (ui32ValVec != _t.ui32ValVec) return false;
            if (ui64Val != _t.ui64Val) return false;
            if (ui64ValVec != _t.ui64ValVec) return false;
            if (!(tMixedVec == _t.tMixedVec)) return false;
            return true;
        }

        zce_byte    ui8Val;
        std::vector<zce_byte> ui8ValVec;
        zce_uint16    ui16Val;
        std::vector<zce_uint16> ui16ValVec;
        ArgsMixed    tMixed;
        zce_uint32    ui32Val;
        std::vector<zce_uint32> ui32ValVec;
        zce_uint64    ui64Val;
        std::vector<zce_uint64> ui64ValVec;
        std::vector<ArgsMixed> tMixedVec;
    };
} //namespace rpcdemo
