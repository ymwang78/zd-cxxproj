// ***************************************************************
//  rpcdemo_pack
//  ---------------------------------------------------------------
//  This file was generated by zgen, don't manually modify.
//  Yongming Wang(wangym@gmail.com)
//  Copyright (C) 2024 - All Rights Reserved
// *****************************************************************

#include "rpcdemo_inc.h"
#include "rpcdemo_proto.h"
#include "rpcdemo_pack.h"
#include "zce/zds_schema.h"

using namespace zdp;
rpcdemo::ArgsMixed rpcdemo::ArgsMixed::_empty;
int zdp::zds_pack(zce_byte* buf, int size, const rpcdemo::ArgsMixed& _t, zds_context_t* ctx, bool has_prefix)
{
    int len = 0, ret = 0;
    zce_uint64 _struct_prefix = 0;
    if (_t.anyVal != 0) _struct_prefix |= 1ull << 0; 
    if (_t.i8Val != 0) _struct_prefix |= 1ull << 1; 
    if (!_t.i8ValVec.empty()) _struct_prefix |= 1ull << 2; 
    if (_t.i16Val != 0) _struct_prefix |= 1ull << 3; 
    if (!_t.i16ValVec.empty()) _struct_prefix |= 1ull << 4; 
    if (_t.i32Val != 0) _struct_prefix |= 1ull << 5; 
    if (!_t.i32ValVec.empty()) _struct_prefix |= 1ull << 6; 
    if (_t.i64Val != 0) _struct_prefix |= 1ull << 7; 
    if (!_t.i64ValVec.empty()) _struct_prefix |= 1ull << 8; 
    if (_t.fltVal != 0) _struct_prefix |= 1ull << 9; 
    if (!_t.fltValVec.empty()) _struct_prefix |= 1ull << 10; 
    if (_t.dblVal != 0) _struct_prefix |= 1ull << 11; 
    if (!_t.dblValVec.empty()) _struct_prefix |= 1ull << 12; 
    if (!_t.strVal.empty()) _struct_prefix |= 1ull << 13; 
    len = zds_pack_struct_header(buf, size, _struct_prefix, ctx, has_prefix);
    CHECKLEN_MOVEBUF_ADDRET_DECSIZE;

    if (_struct_prefix & (1ull << 0)) {
        len = zds_pack_builtin(buf, size, _t.anyVal, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;

    };
    if (_struct_prefix & (1ull << 1)) {
        len = zds_pack_builtin(buf, size, _t.i8Val, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;

    };
    if (_struct_prefix & (1ull << 2)) {
        len = zds_pack_builtin(buf, size, _t.i8ValVec, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 3)) {
        len = zds_pack_builtin(buf, size, _t.i16Val, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;

    };
    if (_struct_prefix & (1ull << 4)) {
        len = zds_pack_builtin(buf, size, _t.i16ValVec, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 5)) {
        len = zds_pack_builtin(buf, size, _t.i32Val, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;

    };
    if (_struct_prefix & (1ull << 6)) {
        len = zds_pack_builtin(buf, size, _t.i32ValVec, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 7)) {
        len = zds_pack_builtin(buf, size, _t.i64Val, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;

    };
    if (_struct_prefix & (1ull << 8)) {
        len = zds_pack_builtin(buf, size, _t.i64ValVec, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 9)) {
        len = zds_pack_builtin(buf, size, _t.fltVal, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;

    };
    if (_struct_prefix & (1ull << 10)) {
        len = zds_pack_builtin(buf, size, _t.fltValVec, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 11)) {
        len = zds_pack_builtin(buf, size, _t.dblVal, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;

    };
    if (_struct_prefix & (1ull << 12)) {
        len = zds_pack_builtin(buf, size, _t.dblValVec, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 13)) {
        len = zds_pack_builtin(buf, size, _t.strVal, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    return ret;
}

int zdp::zds_unpack(rpcdemo::ArgsMixed& _t, const zce_byte* buf, int size, zds_context_t* ctx, bool has_prefix)
{
    int len = 0, ret = 0;
    zce_uint64 _struct_prefix = 0;
    len = zds_unpack_struct_header(_struct_prefix, buf, size, ctx, has_prefix);
    CHECKLEN_MOVEBUF_ADDRET_DECSIZE;

    if (_struct_prefix & (1ull << 0)) {
        len = zds_unpack_builtin(_t.anyVal, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 1)) {
        len = zds_unpack_builtin(_t.i8Val, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 2)) {
        len = zds_unpack_builtin(_t.i8ValVec, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 3)) {
        len = zds_unpack_builtin(_t.i16Val, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 4)) {
        len = zds_unpack_builtin(_t.i16ValVec, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 5)) {
        len = zds_unpack_builtin(_t.i32Val, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 6)) {
        len = zds_unpack_builtin(_t.i32ValVec, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 7)) {
        len = zds_unpack_builtin(_t.i64Val, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 8)) {
        len = zds_unpack_builtin(_t.i64ValVec, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 9)) {
        len = zds_unpack_builtin(_t.fltVal, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 10)) {
        len = zds_unpack_builtin(_t.fltValVec, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 11)) {
        len = zds_unpack_builtin(_t.dblVal, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 12)) {
        len = zds_unpack_builtin(_t.dblValVec, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 13)) {
        len = zds_unpack_builtin(_t.strVal, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    _struct_prefix >>= 14;
    while (_struct_prefix != 0) {
        if (_struct_prefix & 1) {
            len = zds_unpack_skip(buf, size, ctx);
            CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
        }
        _struct_prefix >>= 1;
    };
    return ret;
}

rpcdemo::ArgsDeepMixed rpcdemo::ArgsDeepMixed::_empty;
int zdp::zds_pack(zce_byte* buf, int size, const rpcdemo::ArgsDeepMixed& _t, zds_context_t* ctx, bool has_prefix)
{
    int len = 0, ret = 0;
    zce_uint64 _struct_prefix = 0;
    if (_t.ui8Val != 0) _struct_prefix |= 1ull << 0; 
    if (!_t.ui8ValVec.empty()) _struct_prefix |= 1ull << 1; 
    if (_t.ui16Val != 0) _struct_prefix |= 1ull << 2; 
    if (!_t.ui16ValVec.empty()) _struct_prefix |= 1ull << 3; 
    if (!(_t.tMixed == rpcdemo::ArgsMixed::_empty)) _struct_prefix |= 1ull << 4; 
    if (_t.ui32Val != 0) _struct_prefix |= 1ull << 5; 
    if (!_t.ui32ValVec.empty()) _struct_prefix |= 1ull << 6; 
    if (_t.ui64Val != 0) _struct_prefix |= 1ull << 7; 
    if (!_t.ui64ValVec.empty()) _struct_prefix |= 1ull << 8; 
    if (!_t.tMixedVec.empty()) _struct_prefix |= 1ull << 9; 
    len = zds_pack_struct_header(buf, size, _struct_prefix, ctx, has_prefix);
    CHECKLEN_MOVEBUF_ADDRET_DECSIZE;

    if (_struct_prefix & (1ull << 0)) {
        len = zds_pack_builtin(buf, size, _t.ui8Val, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;

    };
    if (_struct_prefix & (1ull << 1)) {
        len = zds_pack_builtin(buf, size, _t.ui8ValVec, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 2)) {
        len = zds_pack_builtin(buf, size, _t.ui16Val, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;

    };
    if (_struct_prefix & (1ull << 3)) {
        len = zds_pack_builtin(buf, size, _t.ui16ValVec, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 4)) {
        len = zds_pack(buf, size, _t.tMixed, ctx, true);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;

    };
    if (_struct_prefix & (1ull << 5)) {
        len = zds_pack_builtin(buf, size, _t.ui32Val, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;

    };
    if (_struct_prefix & (1ull << 6)) {
        len = zds_pack_builtin(buf, size, _t.ui32ValVec, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 7)) {
        len = zds_pack_builtin(buf, size, _t.ui64Val, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;

    };
    if (_struct_prefix & (1ull << 8)) {
        len = zds_pack_builtin(buf, size, _t.ui64ValVec, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 9)) {
        len = zds_pack_array(buf, size, _t.tMixedVec, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    return ret;
}

int zdp::zds_unpack(rpcdemo::ArgsDeepMixed& _t, const zce_byte* buf, int size, zds_context_t* ctx, bool has_prefix)
{
    int len = 0, ret = 0;
    zce_uint64 _struct_prefix = 0;
    len = zds_unpack_struct_header(_struct_prefix, buf, size, ctx, has_prefix);
    CHECKLEN_MOVEBUF_ADDRET_DECSIZE;

    if (_struct_prefix & (1ull << 0)) {
        len = zds_unpack_builtin(_t.ui8Val, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 1)) {
        len = zds_unpack_builtin(_t.ui8ValVec, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 2)) {
        len = zds_unpack_builtin(_t.ui16Val, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 3)) {
        len = zds_unpack_builtin(_t.ui16ValVec, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 4)) {
        len = zds_unpack(_t.tMixed, buf, size, ctx, true);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 5)) {
        len = zds_unpack_builtin(_t.ui32Val, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 6)) {
        len = zds_unpack_builtin(_t.ui32ValVec, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 7)) {
        len = zds_unpack_builtin(_t.ui64Val, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 8)) {
        len = zds_unpack_builtin(_t.ui64ValVec, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    if (_struct_prefix & (1ull << 9)) {
        len = zds_unpack_array(_t.tMixedVec, buf, size, ctx);
        CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
    };
    _struct_prefix >>= 10;
    while (_struct_prefix != 0) {
        if (_struct_prefix & 1) {
            len = zds_unpack_skip(buf, size, ctx);
            CHECKLEN_MOVEBUF_ADDRET_DECSIZE;
        }
        _struct_prefix >>= 1;
    };
    return ret;
}

