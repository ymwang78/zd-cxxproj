// ***************************************************************
//  zdp_base_proto   version:  1.0                         
//  ------------------------------------------------------------ 
//  This file was generated by vxgen.exe, don't manually modify.   
//  Hangzhou Zhidu Network Ltd.  (admin@zhidu.biz)               
//  Copyright (C) 2013-2018 - All Rights Reserved
// *************************************************************** 

#pragma once
#ifndef _zdp_base_proto_h_
#define _zdp_base_proto_h_

#include <zce/zce_config.h>
#include <zce/zce_smartptr.h>
#include <zce/zce_types.h>

namespace zdp_base
{
    enum ERV_ZDP_ERRO: int
    {
        ZDP_ERRO_BASE = (int)0x80001000,
        ZDP_ERRO_NOTFOUND = (int)0x80001001,
        ZDP_ERRO_BADSERVICE = (int)0x80001002,
        ZDP_ERRO_BADARG = (int)0x80001003,
        ZDP_ERRO_BADPRIV = (int)0x80001004,
        ZDP_ERRO_BADAUTH = (int)0x80001005,
    };

    enum ERV_ZDP_PAYLOAD: int
    {
        ZDP_PAYLOAD_UNKNOW = (int)0x00000000,
        ZDP_PAYLOAD_STRING = (int)0x00000001,
        ZDP_PAYLOAD_JSON = (int)0x00000002,
        ZDP_PAYLOAD_BSON = (int)0x00000003,
        ZDP_PAYLOAD_PROTOBUF = (int)0x00000004,
    };

    enum IE_E: int
    {
        E_IE_RESULT = (int)0x00000010 /*前面16个IE保留*/,
        E_IE_CHAR = (int)0x00000011,
        E_IE_BYTE = (int)0x00000012,
        E_IE_INT16 = (int)0x00000013,
        E_IE_UINT16 = (int)0x00000014,
        E_IE_INT32 = (int)0x00000015,
        E_IE_UINT32 = (int)0x00000016,
        E_IE_INT64 = (int)0x00000017,
        E_IE_STRING254 = (int)0x00000018,
        E_IE_STRING = (int)0x00000019,
        E_IE_STRING_UTF8 = (int)0x00000019,
        E_IE_ANY = (int)0x0000001a,
        E_IE_CONTINER = (int)0x0000001b,
        E_IE_DUMY0 = (int)0x0000001c,
        E_IE_DUMY1 = (int)0x0000001d,
        E_IE_DUMY2 = (int)0x0000001e,
        E_IE_INT64VEC = (int)0x0000001f,
        E_IE_DUMY3 = (int)0x00000020,
        E_IE_NSPAIR = (int)0x00000021,
        E_IE_NIPAIR = (int)0x00000022,
        E_IE_NLLPAIR = (int)0x00000023,
        E_IE_SITEID = (int)0x00000024,
        E_IE_NETADDR = (int)0x00000025,
        E_IE_INTVEC = (int)0x00000026,
        E_IE_NSPAIRS = (int)0x00000027,
    };

    enum MSG_E: int
    {
        E_MSG_NONE_REQ = (int)0x00000000,
        E_MSG_DISCONN_REQ = (int)0x00000004,
        E_MSG_CONTAINER_REQ = (int)0x00000006,
        E_MSG_CONTAINER_RES = (int)0x00000007,
    };

    struct zdp_addr_t
    {

        zdp_addr_t()
        :translayer(0)
        ,ipclass(0)
        ,port(0)
        {
        }

        zce_byte    translayer;
        zce_byte    ipclass;
        zce_uint16    port;
        zce_astring addr;
    };
    struct IE_RESULT
    {
        const static unsigned short IE_TYPE = E_IE_RESULT;

        IE_RESULT()
        :error_code(0)
        {
        }

        zce_int32    error_code;
    };
    struct IE_CHAR
    {
        const static unsigned short IE_TYPE = E_IE_CHAR;

        IE_CHAR()
        :val(0)
        {
        }

        zce_char    val;
    };
    struct IE_BYTE
    {
        const static unsigned short IE_TYPE = E_IE_BYTE;

        IE_BYTE()
        :val(0)
        {
        }

        zce_byte    val;
    };
    struct IE_INT16
    {
        const static unsigned short IE_TYPE = E_IE_INT16;

        IE_INT16()
        :val(0)
        {
        }

        zce_int16    val;
    };
    struct IE_UINT16
    {
        const static unsigned short IE_TYPE = E_IE_UINT16;

        IE_UINT16()
        :val(0)
        {
        }

        zce_uint16    val;
    };
    struct IE_INT32
    {
        const static unsigned short IE_TYPE = E_IE_INT32;

        IE_INT32()
        :val(0)
        {
        }

        zce_int32    val;
    };
    struct IE_UINT32
    {
        const static unsigned short IE_TYPE = E_IE_UINT32;

        IE_UINT32()
        :val(0)
        {
        }

        zce_uint32    val;
    };
    struct IE_INT64
    {
        const static unsigned short IE_TYPE = E_IE_INT64;

        IE_INT64()
        :val(0)
        {
        }

        zce_int64    val;
    };
    struct IE_STRING254
    {
        const static unsigned short IE_TYPE = E_IE_STRING254;
        IE_STRING254() { };
        zce_string val;
    };
    struct IE_STRING
    {
        const static unsigned short IE_TYPE = E_IE_STRING;
        IE_STRING() { };
        zce_string val;
    };
    struct IE_STRING_UTF8
    {
        const static unsigned short IE_TYPE = E_IE_STRING_UTF8;
        IE_STRING_UTF8() { };
        zce_astring val;
    };
    struct IE_ANY
    {
        const static unsigned short IE_TYPE = E_IE_ANY;

        IE_ANY()
        :val(0)
        {
        }

        std::vector<zce_byte> val;
    };
    struct IE_CONTINER
    {
        const static unsigned short IE_TYPE = E_IE_CONTINER;

        IE_CONTINER()
        :subcmd(0)
        ,payload(0)
        ,i64arg(0)
        ,content(0)
        {
        }

        zce_int16    subcmd;
        zce_int16    payload/*ERV_ZDP_PAYLOAD*/;
        zce_int64    i64arg;
        std::vector<zce_byte> content;
    };
    struct IE_INT64VEC
    {
        const static unsigned short IE_TYPE = E_IE_INT64VEC;

        IE_INT64VEC()
        :val(0)
        {
        }

        std::vector<zce_int64> val;
    };
    struct nspair_t
    {
        nspair_t() { };
        zce_astring name/*名*/;
        zce_astring value/*值*/;
    };
    struct IE_NSPAIR
    {
        const static unsigned short IE_TYPE = E_IE_NSPAIR;
        IE_NSPAIR() { };
        nspair_t    pair_t;
    };
    struct IE_NSPAIRS
    {
        const static unsigned short IE_TYPE = E_IE_NSPAIRS;
        IE_NSPAIRS() { };
        std::vector<nspair_t> pair_t;
    };
    struct IE_NIPAIR
    {
        const static unsigned short IE_TYPE = E_IE_NIPAIR;

        IE_NIPAIR()
        :value(0)
        {
        }

        zce_astring name/*名*/;
        zce_int32    value/*值*/;
    };
    struct IE_NLLPAIR
    {
        const static unsigned short IE_TYPE = E_IE_NLLPAIR;

        IE_NLLPAIR()
        :value(0)
        {
        }

        zce_astring name/*名*/;
        zce_int64    value/*值*/;
    };
    struct IE_SITEID
    {
        const static unsigned short IE_TYPE = E_IE_SITEID;
        IE_SITEID() { };
        zce_astring val;
    };
    struct IE_NETADDR
    {
        const static unsigned short IE_TYPE = E_IE_NETADDR;
        IE_NETADDR() { };
        zdp_addr_t    addr_t;
    };
    struct IE_INTVEC
    {
        const static unsigned short IE_TYPE = E_IE_INTVEC;

        IE_INTVEC()
        :val(0)
        {
        }

        std::vector<zce_int32> val;
    };
    struct MSG_NONE_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_NONE_REQ;
        static const char* type_name() { return ("MSG_NONE_REQ");}
        std::vector<IE_NSPAIRS> ie_ns;
    };
    typedef zce_smartptr<MSG_NONE_REQ> MSG_NONE_REQ_PTR;

    struct MSG_DISCONN_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_DISCONN_REQ;
        static const char* type_name() { return ("MSG_DISCONN_REQ");}
    };
    typedef zce_smartptr<MSG_DISCONN_REQ> MSG_DISCONN_REQ_PTR;

    struct MSG_CONTAINER_REQ : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONTAINER_REQ;
        static const char* type_name() { return ("MSG_CONTAINER_REQ");}
        IE_CONTINER    ie_req;
    };
    typedef zce_smartptr<MSG_CONTAINER_REQ> MSG_CONTAINER_REQ_PTR;

    struct MSG_CONTAINER_RES : public zce_smartptr_mtbase
    {
        const static unsigned short MSG_TYPE = E_MSG_CONTAINER_RES;
        static const char* type_name() { return ("MSG_CONTAINER_RES");}
        IE_RESULT    ie_result;
        std::vector<IE_CONTINER> ie_res;
    };
    typedef zce_smartptr<MSG_CONTAINER_RES> MSG_CONTAINER_RES_PTR;

} //namespace zdp_base
#endif //_zdp_base_proto_h_
