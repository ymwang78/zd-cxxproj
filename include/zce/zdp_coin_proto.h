// ***************************************************************
//  zdp_coin_proto
//  ---------------------------------------------------------------
//  This file was generated by zgen, don't manually modify.
//  Yongming Wang(wangym@gmail.com)
//  Copyright (C) 2024 - All Rights Reserved
// *****************************************************************

#pragma once

#include <zce/zce_config.h>
#include <zce/zce_object.h>
#include <zce/zce_types.h>
#include <zce/zce_dblock.h>
#include <zce/zce_any.h>

namespace zdp_coin
{
    struct zds_context_t;
    enum ERV_COIN_FLAG: int
    {
        ERV_COIN_FLAG_ALLOWNEG = (int)0x00000001,
        ERV_COIN_FLAG_UPTCOIN = (int)0x00000002,
    };

    enum ERV_COINLOCK_FLAG: int
    {
        ERV_COINLOCK_INCREATE = (int)0x00000001,
    };

    struct tradelog_t
    {
        static tradelog_t _empty;

        bool operator==(const tradelog_t& _t) const noexcept
        {
            if (serialid != _t.serialid) return false;
            if (logtime != _t.logtime) return false;
            if (coinnum != _t.coinnum) return false;
            if (original != _t.original) return false;
            if (remain != _t.remain) return false;
            if (tradetype != _t.tradetype) return false;
            if (tradename != _t.tradename) return false;
            if (tradeid != _t.tradeid) return false;
            if (memo != _t.memo) return false;
            return true;
        }

        zce_tstring serialid;
        zce_int64    logtime;
        zce_int64    coinnum;
        zce_int64    original;
        zce_int64    remain;
        zce_tstring tradetype;
        zce_tstring tradename;
        zce_tstring tradeid;
        zce_tstring memo;
    };
    struct coinsimp_t
    {
        static coinsimp_t _empty;

        bool operator==(const coinsimp_t& _t) const noexcept
        {
            if (coin != _t.coin) return false;
            if (tcoin != _t.tcoin) return false;
            if (coinlocked != _t.coinlocked) return false;
            if (lastupdate != _t.lastupdate) return false;
            return true;
        }

        zce_int64    coin;
        zce_int64    tcoin;
        zce_int64    coinlocked;
        zce_int64    lastupdate;
    };
    struct coindetail_t
    {
        static coindetail_t _empty;

        bool operator==(const coindetail_t& _t) const noexcept
        {
            if (uid != _t.uid) return false;
            if (coinname != _t.coinname) return false;
            if (lockid != _t.lockid) return false;
            if (coin != _t.coin) return false;
            if (tcoin != _t.tcoin) return false;
            if (selflocked != _t.selflocked) return false;
            if (otherlocked != _t.otherlocked) return false;
            if (lastupdate != _t.lastupdate) return false;
            if (lockexpire != _t.lockexpire) return false;
            return true;
        }

        zce_int64    uid;
        zce_tstring coinname;
        zce_tstring lockid;
        zce_int64    coin;
        zce_int64    tcoin;
        zce_int64    selflocked;
        zce_int64    otherlocked;
        zce_int64    lastupdate;
        zce_int64    lockexpire;
    };
    struct tradereq_t
    {
        static tradereq_t _empty;

        bool operator==(const tradereq_t& _t) const noexcept
        {
            if (serverid != _t.serverid) return false;
            if (tradetype != _t.tradetype) return false;
            if (tradename != _t.tradename) return false;
            if (tradeid != _t.tradeid) return false;
            if (memo != _t.memo) return false;
            if (critisteps != _t.critisteps) return false;
            if (serialids != _t.serialids) return false;
            if (coinnames != _t.coinnames) return false;
            if (useridxs != _t.useridxs) return false;
            if (coinnums != _t.coinnums) return false;
            if (tradeflags != _t.tradeflags) return false;
            if (coinlockid != _t.coinlockid) return false;
            if (endlock != _t.endlock) return false;
            return true;
        }

        zce_tstring serverid/*发起交易的服务器ID*/;
        zce_tstring tradetype/*交易类型ID*/;
        zce_tstring tradename/*交易名*/;
        zce_tstring tradeid/*交易关联ID*/;
        zce_tstring memo/*交易备注*/;
        zce_uint32    critisteps/*前面steps为关键，如果失败整个交易取消*/;
        zce_astrvec    serialids/*交易流水号，如果小于需要数组大小，将以第一个serialid_{index}补齐*/;
        zce_astrvec    coinnames/*交易币名称*/;
        std::vector<zce_int64> useridxs/*交易用户ID*/;
        std::vector<zce_int64> coinnums/*交易币数量*/;
        std::vector<zce_byte> tradeflags/*交易标志, 参考 ERV_COIN_FLAG*/;
        zce_tstring coinlockid/*对应的锁定ID*/;
        zce_byte    endlock/*取消LOCK*/;
    };
    struct queryhis_t
    {
        static queryhis_t _empty;

        bool operator==(const queryhis_t& _t) const noexcept
        {
            if (serverid != _t.serverid) return false;
            if (coinname != _t.coinname) return false;
            if (useridx != _t.useridx) return false;
            if (begint != _t.begint) return false;
            if (endt != _t.endt) return false;
            if (startidx != _t.startidx) return false;
            if (querynum != _t.querynum) return false;
            return true;
        }

        zce_tstring serverid;
        zce_tstring coinname;
        zce_int64    useridx;
        zce_int64    begint;
        zce_int64    endt;
        zce_int32    startidx;
        zce_int32    querynum;
    };
    struct coinlock_t
    {
        static coinlock_t _empty;

        bool operator==(const coinlock_t& _t) const noexcept
        {
            if (lockid != _t.lockid) return false;
            if (lockname != _t.lockname) return false;
            if (expire != _t.expire) return false;
            if (criticalstep != _t.criticalstep) return false;
            if (flag != _t.flag) return false;
            return true;
        }

        zce_tstring lockid;
        zce_tstring lockname;
        zce_int32    expire;
        zce_int32    criticalstep;
        zce_byte    flag;
    };
    struct coinlockitem_t
    {
        static coinlockitem_t _empty;

        bool operator==(const coinlockitem_t& _t) const noexcept
        {
            if (coinname != _t.coinname) return false;
            if (uid != _t.uid) return false;
            if (locknum != _t.locknum) return false;
            if (maxlock != _t.maxlock) return false;
            return true;
        }

        zce_tstring coinname;
        zce_int64    uid;
        zce_int64    locknum;
        zce_int64    maxlock;
    };
} //namespace zdp_coin
