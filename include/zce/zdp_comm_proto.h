// ***************************************************************
//  zdp_comm_proto
//  ---------------------------------------------------------------
//  This file was generated by zgen, don't manually modify.
//  Yongming Wang(wangym@gmail.com)
//  Copyright (C) 2025 - All Rights Reserved
// *****************************************************************

#pragma once

#include <zce/zce_config.h>
#include <zce/zce_object.h>
#include <zce/zce_types.h>
#include <zce/zce_dblock.h>
#include <zce/zce_any.h>

namespace zdp_comm
{
    struct zds_context_t;
    enum ERV_PROTOERR_TYPE: int
    {
        ERV_OK = (int)0x00000000,
        ERV_SUCS_CMN_BASE = (int)0x00010000 /*未定义返回*/,
        ERV_SUCS_CMN_VERSIONDEPPRE = (int)0x00010001 /*版本即将过期，尽快下载新版本*/,
        ERV_SUCS_CMS_BASE = (int)0x00020000 /*未定义网管服务返回*/,
        ERV_SUCS_STM_BASE = (int)0x00020000 /*未定义STORM服务返回*/,
        ERV_SUCS_DBS_BASE = (int)0x000a0000 /*未定义数据服务返回*/,
        ERV_SUCS_UAS_BASE = (int)0x000b0000 /*未定义数据服务返回*/,
        ERV_SUCS_MSS_BASE = (int)0x000c0000 /*未定义调度服务返回*/,
        ERV_SUCS_MDS_BASE = (int)0x000d0000 /*未定义分发服务返回*/,
        ERV_SUCS_KSS_BASE = (int)0x000e0000 /*未定义分发服务返回*/,
        ERV_SUCS_COI_BASE = (int)0x000f0000 /*未定义币服务返回*/,
        ERV_SUCS_KTV_BASE = (int)0x00140000 /*未定义视频房返回*/,
        ERV_SUCS_ROM_BASE = (int)0x00150000 /*未定义游戏房返回*/,
        ERV_SUCS_ZHN_BASE = (int)0x00200000 /*未定义视频房返回*/,
        ERV_ERRO_COM_BASE = (int)0x80001000 /*本地通讯错误*/,
        ERV_ERRO_COM_CONN = (int)0x80001001 /*连接失败*/,
        ERV_ERRO_COM_TIMEOUT = (int)0x80001002 /*连接超时*/,
        ERV_ERRO_CMN_BASE = (int)0x80010000 /*未定义数据服务错误*/,
        ERV_ERRO_CMN_NOMEM = (int)0x80010001 /*内存不足*/,
        ERV_ERRO_CMN_UNPACK = (int)0x80010002 /*解包错误*/,
        ERV_ERRO_CMN_PACK = (int)0x80010003 /*封包错误*/,
        ERV_ERRO_CMN_UNAVAILSERVICE = (int)0x80010004 /*服务不可用*/,
        ERV_ERRO_CMN_CMDERROR = (int)0x80010005 /*命令错误*/,
        ERV_ERRO_CMN_NODBSPROXY = (int)0x80010006 /*数据服务不可达*/,
        ERV_ERRO_CMN_NOMSSPROXY = (int)0x80010007 /*调度服务不可达*/,
        ERV_ERRO_CMN_NOMDSPROXY = (int)0x80010008 /*分发服务不可达*/,
        ERV_ERRO_CMN_DBS_FAILE = (int)0x80010009 /*数据服务失败*/,
        ERV_ERRO_CMN_MSS_FAILE = (int)0x8001000a /*调度服务失败*/,
        ERV_ERRO_CMN_MDS_FAILE = (int)0x8001000b /*分发服务失败*/,
        ERV_ERRO_CMN_DBS_NORECORD = (int)0x8001000c /*数据服务缺少相关记录*/,
        ERV_ERRO_CMN_ICEEXCEPTION = (int)0x8001000d /*服务通讯异常*/,
        ERV_ERRO_CMN_RESULTERROR = (int)0x8001000e /*结果错误*/,
        ERV_ERRO_CMN_USER_CANCELED = (int)0x8001000f /*用户取消*/,
        ERV_ERRO_CMN_NOTSUPPORT = (int)0x80010010 /*本功能不支持*/,
        ERV_ERRO_CMN_BUSY = (int)0x80010011 /*系统忙*/,
        ERV_ERRO_CMN_TIMEOUT = (int)0x80010012 /*系统超时*/,
        ERV_ERRO_CMN_INVALID_UID = (int)0x80010013 /*无效用户ID*/,
        ERV_ERRO_CMN_INVALID_RID = (int)0x80010014 /*无效房间ID*/,
        ERV_ERRO_CMN_INVALID_SID = (int)0x80010015 /*无效SESSIONID*/,
        ERV_ERRO_CMN_INVALID_SERVERID = (int)0x80010016 /*无效服务ID*/,
        ERV_ERRO_CMN_OUTOFDATE = (int)0x80010017 /*过期*/,
        ERV_ERRO_CMN_LOGINFAIL = (int)0x80010018 /*登陆失败*/,
        ERV_ERRO_CMN_NOPRIVILEGE = (int)0x80010019 /*权限不足*/,
        ERV_ERRO_CMN_ERRORTYPE = (int)0x8001001a /*类型错误*/,
        ERV_ERRO_CMN_INVALID_ARG = (int)0x8001001b /*非法参数*/,
        ERV_ERRO_CMN_PEERDENY = (int)0x8001001c /*对方拒绝或者错误导致请求无法实现，例如上麦*/,
        ERV_ERRO_CMN_NOSTORMPROXY = (int)0x8001001d /*广播服务器不可达*/,
        ERV_ERRO_CMN_VERSIONEXPIRE = (int)0x8001001e /*版本过旧，不再支持*/,
        ERV_ERRO_CMN_ILLEGAL = (int)0x8001001f /*含有不符合道德法律法规的内容*/,
        ERV_ERRO_CMN_DUMPLICATE = (int)0x80010020 /*已经在目的状态，不需要重复，比如重复排麦*/,
        ERV_ERRO_CMN_NOCACHE = (int)0x80010021 /*缓存系统故障*/,
        ERV_ERRO_CMN_EXPIRE = (int)0x80010022 /*数据已经过期*/,
        ERV_ERRO_CMN_DUPSID = (int)0x80010023 /*SID重复*/,
        ERV_ERRO_CMN_BAN_USER = (int)0x80010024 /*封禁用户*/,
        ERV_ERRO_CMN_CHECK_USER = (int)0x80010025 /*需要用户二次验证*/,
        ERV_ERRO_CMN_NOIP = (int)0x80010026 /*隐身衣效果内，不允许查ip*/,
        ERV_ERRO_CMN_BADPWD = (int)0x80010027 /*密码错误*/,
        ERV_ERRO_CMN_DISABLE = (int)0x80010028 /*此功能被关闭*/,
        ERV_ERRO_CMN_FULL = (int)0x80010029 /*人数满了*/,
        ERV_ERRO_CMN_TOOFAST = (int)0x8001002a /*动作太快*/,
        ERV_ERRO_CMN_WAITAUTH = (int)0x8001002b /*等待手机端验证*/,
        ERV_ERRO_CMN_DENYAUTH = (int)0x8001002c /*手机端拒绝登陆*/,
        ERV_ERRO_DBS_BADDBC = (int)0x800a0001 /*数据库连接失败*/,
        ERV_ERRO_DBS_BADPWD = (int)0x800a0002 /*密码错误*/,
        ERV_ERRO_DBS_BADUID = (int)0x800a0003 /*无效的用户ID*/,
        ERV_ERRO_DBS_BADSID = (int)0x800a0004 /*无效的会话ID*/,
        ERV_ERRO_DBS_BADRID = (int)0x800a0005 /*无效的房间ID*/,
        ERV_ERRO_DBS_BADPRV = (int)0x800a0006 /*没有足够的权限*/,
        ERV_ERRO_DBS_BADARG = (int)0x800a0007 /*提供了无效的参数*/,
        ERV_ERRO_DBS_BADSRV = (int)0x800a0008 /*无效的服务调用*/,
        ERV_ERRO_DBS_BADPRC = (int)0x800a0009 /*存储过程调用错误*/,
        ERV_ERRO_DBS_BANIP = (int)0x800a000a /*IP被封*/,
        ERV_ERRO_DBS_BANUID = (int)0x800a000b /*ID被封*/,
        ERV_ERRO_DBS_NOMONEY = (int)0x800a000c /*币不足*/,
        ERV_ERRO_DBS_BADMGO = (int)0x800a000d /*业务数据库连接失败*/,
        ERV_ERRO_DBS_BADCACHE = (int)0x800a000e /*缓存数据库连接失败*/,
        ERV_ERRO_DBS_CONSUME_FINISHED = (int)0x800a000f /*本次道具赠送过程已经完成*/,
        ERV_ERRO_DBS_LIMIT = (int)0x800a0010 /*数量超出限制*/,
        ERV_ERRO_DBS_BADPROP = (int)0x800a0011 /*道具特殊属性，例如守护*/,
        ERV_ERRO_DBS_RESOURCELIMIT = (int)0x800a0012 /*服务器资源不足*/,
        ERV_ERRO_DBS_ZHUCHIPROP = (int)0x800a0013 /*道具只能赠送主持*/,
        ERV_ERRO_DBS_PIUBASE = (int)0x800a0200,
        ERV_ERRO_DBS_PIUMUSTLOGIN = (int)0x800a0201 /*此项操作需要本机用户机登录PIUPIU才能完成*/,
        ERV_ERRO_DBS_PIUMUSTLOGINBIND = (int)0x800a0202 /*为了系统安全，此项操作需要机器登录绑定过手机的PIUPIU*/,
        ERV_ERRO_DBS_BANBASE = (int)0x800a1000,
        ERV_ERRO_DBS_BAN_ID = (int)0x800a1001 /*账号/IP/机器被冻结，错误代码0x800A1001，请联系客服*/,
        ERV_ERRO_DBS_BAN_IP = (int)0x800a1002 /*账号/IP/机器被冻结，错误代码0x800A1002，请联系客服*/,
        ERV_ERRO_DBS_BAN_N0 = (int)0x800a1003 /*账号/IP/机器被冻结，错误代码0x800A1003，请联系客服*/,
        ERV_ERRO_DBS_BAN_N1 = (int)0x800a1004 /*账号/IP/机器被冻结，错误代码0x800A1004，请联系客服*/,
        ERV_ERRO_DBS_BAN_N2 = (int)0x800a1005 /*账号/IP/机器被冻结，错误代码0x800A1005，请联系客服*/,
        ERV_ERRO_DBS_BAN_N3 = (int)0x800a1006 /*账号/IP/机器被冻结，错误代码0x800A1006，请联系客服*/,
        ERV_ERRO_DBS_BAN_N4 = (int)0x800a1007 /*账号/IP/机器被冻结，错误代码0x800A1007，请联系客服*/,
        ERV_ERRO_DBS_BAN_N5 = (int)0x800a1008 /*账号/IP/机器被冻结，错误代码0x800A1008，请联系客服*/,
        ERV_ERRO_DBS_BAN_MB = (int)0x800a1009 /*账号/IP/机器被冻结，错误代码0x800A1009，请联系客服*/,
        ERV_ERRO_MSS_BASE = (int)0x800c0000 /*未定义调度服务错误*/,
        ERV_ERRO_MSS_SID_MISMATCH = (int)0x800c0001 /*SID不匹配*/,
        ERV_ERRO_MDS_BASE = (int)0x800d0000 /*未定义分发服务错误*/,
        ERV_ERRO_MDS_OFFLINE = (int)0x800d0001 /*MDS服务未在线*/,
        ERV_ERRO_MDS_TIMEOUT = (int)0x800d0002 /*MDS服务响应超时*/,
        ERV_ERRO_MDS_FAILTURE = (int)0x800d0003 /*MDS服务响应失败*/,
        ERV_ERRO_MDS_CHANNEL_EXIST = (int)0x800d0100 /*新增的通道ID已经存在*/,
        ERV_ERRO_MDS_UNKNOWN_PROTOCOL_TYPE = (int)0x800d0101 /*不认识的协议类型*/,
        ERV_ERRO_MDS_UNKNOWN_DATA_DIR = (int)0x800d0102 /*不认识的数据流方向*/,
        ERV_ERRO_MDS_UNKNOWN_DST_ADDR_MODE = (int)0x800d0103 /*不认识的目标地址获取方式*/,
        ERV_ERRO_MDS_INVALID_GROUP = (int)0x800d0104 /*无效的房间编号*/,
        ERV_ERRO_MDS_ERROR_DST_ADDR_MODE = (int)0x800d0105 /*错误的目标地址获取方式，主要是TCP未指定为对方激活方式*/,
        ERV_ERRO_MDS_IN_CHANNEL_BIND_ERROR = (int)0x800d0106 /*入通道不应当主动绑定其它通道错误*/,
        ERV_ERRO_MDS_BIND_CHANNEL_NOEXIST = (int)0x800d0107 /*绑定的入通道不存在*/,
        ERV_ERRO_MDS_NO_SOCKET_TO_USE = (int)0x800d0108 /*没有可用的SOCKET*/,
        ERV_ERRO_MDS_INIT_SOCKET_ERROR = (int)0x800d0109 /*初始化SCOKET失败*/,
        ERV_ERRO_MDS_BIND_FAILED = (int)0x800d010a /*SOCKET绑定失败，一般是端口错误，管理线程可以重试其它端口*/,
        ERV_ERRO_MDS_CONNECT_FAILED = (int)0x800d010b /*连接错误，因为只有UDP的连接目标，可能是目标地址不合法*/,
        ERV_ERRO_MDS_CHANNEL_ID_INVALID = (int)0x800d010c /*新增的通道ID不合法*/,
        ERV_ERRO_MDS_DATA_DIR_NO_MATCHING = (int)0x800d010d /*新增的通道与关联通道的数据流向不匹配*/,
        ERV_ERRO_MDS_LISTEN_FAILED = (int)0x800d010e /*LISTEN函数调用失败*/,
        ERV_ERRO_MDS_ADD_SELECT_FD_FAILED = (int)0x800d010f /*增加SOCKET到SELECT集失败，超出最大允许数目*/,
        ERV_ERRO_MDS_NO_THREAD = (int)0x800d0110 /*没有可以用于转发的线程 10*/,
        ERV_ERRO_MDS_NO_PORT = (int)0x800d0111 /*没有可以使用的端口*/,
        ERV_ERRO_MDS_ADD_TIMEOUT = (int)0x800d0112 /*增加新通道超时*/,
        ERV_ERRO_MDS_GROUP_OUT_FULL = (int)0x800d0113 /*组输出满了*/,
        ERV_ERRO_MDS_BIND_GROUP_NOEXIST = (int)0x800d0114 /*绑定的输出组不存在*/,
        ERV_ERRO_MDS_BIND_GROUP_OUT_FULL = (int)0x800d0115 /*入通道要绑的出组满了，不能超过IN_MAX_GROUP*/,
        ERV_ERRO_MDS_BIND_GROUP_IN_FULL = (int)0x800d0116 /*入通道要绑的出组满了，不能超过IN_MAX_GROUP*/,
        ERV_ERRO_MDS_UNKNOW_ECEPTION = (int)0x800d0117 /*未定义的错误*/,
        ERV_ERRO_MDS_PARAM_ERR = (int)0x800d0201 /*增加，删除，设置通道时参数错误*/,
        ERV_ERRO_MDS_SND_MSG2MGR_FAILED = (int)0x800d0202 /*转发消息给管理线程时失败*/,
        ERV_ERRO_MDS_SND_MSG2DIST_FAILED = (int)0x800d0203 /*转发消息给数据分发线程时失败*/,
        ERV_ERRO_MDS_LICENSE_LIMIT = (int)0x800d0204 /*增加通道时受到license限制*/,
        ERV_ERRO_MDS_DEL_CHANNEL_NOEXIST = (int)0x800d0300 /*删除通道时失败的原因定义*/,
        ERV_ERRO_MDS_QUERY_CHANNEL_NOEXIST = (int)0x800d0400 /*查询通道时通道不存在*/,
        ERV_ERRO_KTV_BASE = (int)0x80140000 /*未定义KTV房服务错误*/,
        ERV_ERRO_KTV_BAN = (int)0x80140001 /*用户被封*/,
        ERV_ERRO_KTV_LIMIT = (int)0x80140002 /*超限*/,
        ERV_ERRO_KTV_PASSWD = (int)0x80140003 /*口令错误*/,
        ERV_ERRO_KTV_NOTHERE = (int)0x80140004 /*用户不在本房间，可能是退出*/,
        ERV_ERRO_KTV_INUSE = (int)0x80140005 /*这个窗口已经有人占用了*/,
        ERV_ERRO_KTV_TEMPBAN = (int)0x80140006 /*踢出房间后临时被封*/,
        ERV_ERRO_KTV_SPEAKTOOFAST = (int)0x80140007 /*说得太快*/,
        ERV_ERRO_KTV_CHNCLOSED = (int)0x80140008 /*通道已经关闭*/,
        ERV_ERRO_KTV_INSETTING = (int)0x80140009 /*房间设置动作正在进行中*/,
        ERV_ERRO_KTV_NOPRIVMIC = (int)0x8014000a /*房间不允许私麦*/,
        ERV_ERRO_KTV_NOSHOWMIC = (int)0x8014000b /*房间不允许表演麦*/,
        ERV_ERRO_KTV_STATNOTSAT = (int)0x8014000c /*在当前房间的状态不允许执行此操作,例如上麦隐身*/,
        ERV_ERRO_KTV_NOMANAGER = (int)0x8014000d /*当前房间没有管理员在，无法进行此操作*/,
        ERV_ERRO_KTV_INSENDING = (int)0x8014000e /*此道具正在赠送过程中，等上一次赠送完毕后才可以继续*/,
        ERV_ERRO_KTV_VIPCHAT = (int)0x8014000f /*只有vip及以上用户能公聊*/,
        ERV_ERRO_KTV_PIUMUSTLOGINBIND = (int)0x80140010 /*为了公平以及防止外挂，此项操作需要您登陆绑定的PIUPIU*/,
        ERV_ERRO_COIN_BASE = (int)0x800f0000 /*未定义币服务错误*/,
        ERV_ERRO_COIN_NEGTIVE = (int)0x800f0001 /*币不够导致交易失败*/,
        ERV_ERRO_COIN_AUTHLEVEL = (int)0x800f0002 /*SERVERID认证级别不够系统要求*/,
        ERV_ERRO_COIN_AUTHID = (int)0x800f0003 /*SERVERID验证失败*/,
        ERV_ERRO_COIN_AUTHIP = (int)0x800f0004 /*SERVERIP校验失败*/,
        ERV_ERRO_COIN_AUTHLIMIT = (int)0x800f0005 /*超过限额*/,
        ERV_ERRO_ROM_BASE = (int)0x80160000 /*未定义游戏服务错误*/,
        ERV_ERRO_ROM_CLOSING = (int)0x80160001 /*由于此游戏房间即将暂停服务，玩家不允许再进入游戏桌*/,
        ERV_ERRO_ROM_TABLE_FULL = (int)0x80160002 /*桌子人满，请找其他座位*/,
        ERV_ERRO_ROM_TABLE_TOKEN = (int)0x80160003 /*椅子已经被他人捷足先登了，下次动作要快点了！*/,
        ERV_ERRO_ROM_TABLE_STATED = (int)0x80160004 /*游戏已经开始，暂时不能进入*/,
        ERV_ERRO_ROM_TABLE_LIMIT = (int)0x80160005 /*游戏币或者积分不符合房间设置要求*/,
        ERV_ERRO_ROM_TABLE_PASSWD = (int)0x80160006 /*密码错误，不能加入游戏*/,
        ERV_ERRO_CMS_BASE = (int)0x80180000 /*未定义网管错误*/,
        ERV_ERRO_CMS_SERVERID = (int)0x80180001 /*服务器ID错误*/,
        ERV_ERRO_CMS_WANTLOGIN = (int)0x80180002 /*需要（重新）登陆*/,
        ERV_ERRO_IMS_BASE = (int)0x80190000 /*未定义IM错误*/,
        ERV_ERRO_IMS_NOTFRIEND = (int)0x80190001 /*非好友不能发送消息*/,
        ERV_ERRO_IMS_NOTINGROUP = (int)0x80190002 /*非群组成员不能发送消息*/,
        ERV_ERRO_HPY_BASE = (int)0x80330001 /*游戏错误*/,
        ERV_ERRO_HPY_NOENOUGHCOIN = (int)0x80330002 /*金币不足*/,
        ERV_ERRO_HPY_OFFBANKLATER = (int)0x80330003 /*当前状态无法下庄，下一把将自动下庄*/,
        ERV_ERRO_HPY_INWAITLIST = (int)0x80330004 /*已经在候选庄上*/,
        ERV_ERRO_HPY_OVERFLOW = (int)0x80330005 /*超出最大可押数量*/,
        ERV_ERRO_HPY_BANKBET = (int)0x80330006 /*庄家不可押币*/,
        ERV_ERRO_HPY_NOTBETTIME = (int)0x80330007 /*不是押币时间*/,
        ERV_ERRO_HPY_OVERPERSONAL = (int)0x80330008 /*超出最大个人可押数量*/,
        ERV_ERRO_HPY_OFFBANKNOCOIN = (int)0x80330009 /*金币不足导致自动辞职*/,
        ERV_ERRO_HPY_OFFBANKSWITCH = (int)0x8033000a /*达到最大连任次数，辞去农场主*/,
        ERV_ERRO_HPY_OFFBANKCHOOSE = (int)0x8033000b /*用户选择辞职*/,
        ERV_ERRO_HPY_OFFBANKPRESERV = (int)0x8033000c /*农主预扣失败*/,
        ERV_ERRO_HPY_LOGINREPLACED = (int)0x8033000d /*重复登陆*/,
        ERV_ERRO_HPY_OVERDAYLYLIMIT = (int)0x8033000e /*超出每日输赢限制*/,
        ERV_ERRO_HPY_INVALIDTIME = (int)0x8033000f /*此时间段不能操作，比如开奖状态入股*/,
        ERV_REDPACK_SUCS_BASE = (int)0x03004000,
        ERV_REDPACK_SUCS_FINISH = (int)0x03004001,
        ERV_REDPACK_SUCS_RELOAD = (int)0x03004002 /*没有发完的红包从数据库中找回，比如重启服务器之类的 */,
        ERV_REDPACK_ERRO_BASE = (int)0x83004000,
        ERV_REDPACK_ERRO_NOTFOUND = (int)0x83004001 /*找不到红包*/,
        ERV_REDPACK_ERRO_NOPERMISSION = (int)0x83004002 /*没有权限抢这个红包*/,
        ERV_REDPACK_ERRO_NUMERR = (int)0x83004003 /*红包已经抢完*/,
        ERV_REDPACK_ERRO_HAVEROBED = (int)0x83004004 /*抢过该红包*/,
        ERV_REDPACK_ERRO_NEEDJUEWEI = (int)0x83004005 /*需要爵位才能抢*/,
        ERV_REDPACK_ERRO_NEEDKOUSHUI = (int)0x83004006 /*需要今天在广场发言过才能抢*/,
        ERV_REDPACK_ERRO_NEEDLIANGHAO = (int)0x83004007 /*需要有靓号才能抢*/,
        ERV_REDPACK_ERRO_PRIVATEMATCH = (int)0x83004008 /*不能抢发给别人的私包*/,
        ERV_FUDAI_SUCS_BASE = (int)0x03004020,
        ERV_FUDAI_SUCS_FINISH = (int)0x03004021,
        ERV_FUDAI_SUCS_RELOAD = (int)0x03004022 /*没有发完的红包从数据库中找回，比如重启服务器之类的*/,
        ERV_FUDAI_ERRO_BASE = (int)0x83004020,
        ERV_FUDAI_ERRO_NOPERMISSION = (int)0x83004021 /*没有权限猜福袋*/,
        ERV_FUDAI_ERRO_COMPLETE = (int)0x83004022 /*福袋已经猜完*/,
        ERV_FUDAI_ERRO_GUESSIDERR = (int)0x83004023 /*本次不应该是你抢*/,
        ERV_FUDAI_ERRO_SENDNUMERR = (int)0x83004024 /*小福袋数量错误*/,
        ERV_FUDAI_ERRO_NOTFOUND = (int)0x83004025 /*找不到福袋*/,
        ERV_CHEST_ERRO_BASE = (int)0x83004080,
        ERV_CHEST_ERRO_COUNTERR = (int)0x83004081 /*抽奖次数不足*/,
        ERV_CHEST_ERRO_POOLERR = (int)0x83004082 /*奖池数不足500*/,
        ERV_CARD_ERRO_BASE = (int)0x83004f00,
        ERV_CARD_ERRO_ROMCLOSE = (int)0x83004f01,
        ERV_CARD_ERRO_ROMRID = (int)0x83004f02 /*房间号*/,
        ERV_CARD_ERRO_TBLID = (int)0x83004f03 /*桌号错误*/,
        ERV_CARD_ERRO_TBLCID = (int)0x83004f04 /*座位号错误*/,
        ERV_CARD_ERRO_TBLCIDTAKEN = (int)0x83004f05 /*座位被占了*/,
        ERV_CARD_ERRO_TBLSTARED = (int)0x83004f06 /*桌子已经开始玩了*/,
        ERV_CARD_ERRO_TBLFULL = (int)0x83004f07 /*人满了*/,
        ERV_CARD_ERRO_TBLDOWNLIMIT = (int)0x83004f08 /*超下限*/,
        ERV_CARD_ERRO_TBLUPPERLIMIT = (int)0x83004f09 /*超上限*/,
        ERV_CARD_ERRO_TBLDENYSAMEIP = (int)0x83004f0a /*拒绝相同IP*/,
        ERV_CARD_ERRO_TBLPASSWD = (int)0x83004f0b /*桌子密码错误*/,
        ERV_CARD_ERRO_TBLNOBODY = (int)0x83004f0c,
        ERV_CARD_ERRO_TBLRULEDENY = (int)0x83004f0d /*规则禁止*/,
        ERV_CARD_ERRO_TBLNOCARD = (int)0x83004f0e /*没有这张牌*/,
        ERV_CARD_ERRO_TBLSTATUS = (int)0x83004f0f /*不在允许此动作的状态，例如在等碰期间出牌*/,
        ERV_CARD_ERRO_TBLOTHERPLAYING = (int)0x83004f10 /*有其他房间未结束*/,
        ERV_CARD_ERRO_TBLDENYCHEATOR = (int)0x83004f11 /*有其他玩家和你一起被举报作弊*/,
        ERV_CARD_ERRO_KINDID = (int)0x83004f20 /*游戏类型不支持*/,
        ERV_CARD_ERRO_SITEID = (int)0x83004f21 /*站点错误*/,
    };

    enum ERV_USER_SIMPINF_FLAG: int
    {
        ERV_USER_SIMPINFO_NONE = (int)0x00000000,
        ERV_USER_SIMPINFO_OFFLINE = (int)0x00000001,
        ERV_USER_SIMPINFO_REALAUTH = (int)0x00000020 /*实名认证*/,
        ERV_USER_SIMPINFO_MALE = (int)0x00000040,
        ERV_USER_SIMPINFO_FEMAIL = (int)0x00000080,
    };

    enum ERV_USER_BASIC_FLAG: int
    {
        ERV_USER_BASIC_NONE = (int)0x00000000,
        ERV_USER_BASIC_VIDEO = (int)0x00000001,
        ERV_USER_BASIC_AUDIO = (int)0x00000002,
        ERV_USER_BASIC_CELLPID = (int)0x00000004,
        ERV_USER_BASIC_INNERDEV = (int)0x00000008 /*内测账户*/,
        ERV_USER_BASIC_REALAUTH = (int)0x00000020 /*实名认证*/,
        ERV_USER_BASIC_MALE = (int)0x00000040 /*男性*/,
        ERV_USER_BASIC_FEMAIL = (int)0x00000080 /*女性*/,
        ERV_USER_BASIC_GENDERMASK = (int)0x000000c0 /*测试标志*/,
    };

    enum ERV_USER_SECURITY_FLAG: int
    {
        ERV_USER_SECURITY_NONE = (int)0x00000000,
        ERV_USER_SECURITY_ISDEV = (int)0x00000001 /*是否手机登陆*/,
        ERV_USER_SECURITY_ISPROT = (int)0x00000002 /*是否开启保护*/,
    };

    enum ERV_USER_TRUSTDEV_FLAG: int
    {
        ERV_USER_TRUSTDEV_NONE = (int)0x00000000 /*未经验证*/,
        ERV_USER_TRUSTDEV_ONCE = (int)0x00000001 /*一次性验证*/,
        ERV_USER_TRUSTDEV_PERSIST = (int)0x00000002 /*永久验证*/,
    };

    struct simpinfo_t
    {
        static simpinfo_t _empty;

        bool operator==(const simpinfo_t& _t) const noexcept
        {
            if (iid != _t.iid) return false;
            if (pid != _t.pid) return false;
            if (uid != _t.uid) return false;
            if (llevel != _t.llevel) return false;
            if (rlevel != _t.rlevel) return false;
            if (peerage != _t.peerage) return false;
            if (flagandgender != _t.flagandgender) return false;
            if (pidstar != _t.pidstar) return false;
            if (rid != _t.rid) return false;
            if (nick != _t.nick) return false;
            if (siteid != _t.siteid) return false;
            return true;
        }

        zce_uint32    iid;
        zce_uint32    pid;
        zce_uint32    uid;
        zce_int16    llevel/*级别*/;
        zce_int16    rlevel/*房间级别*/;
        zce_int16    peerage/*爵位*/;
        zce_byte    flagandgender/*ERV_USER_SIMPINF_FALG*/;
        zce_byte    pidstar;
        zce_uint32    rid;
        std::vector<zce_tstring> nick;
        std::vector<zce_tstring> siteid;
    };
    struct userextra_t
    {
        static userextra_t _empty;

        bool operator==(const userextra_t& _t) const noexcept
        {
            if (str0 != _t.str0) return false;
            if (str1 != _t.str1) return false;
            if (ipreserv0 != _t.ipreserv0) return false;
            if (lpreserv0 != _t.lpreserv0) return false;
            if (image != _t.image) return false;
            if (ipaddr != _t.ipaddr) return false;
            return true;
        }

        std::vector<zce_tstring> str0;
        std::vector<zce_tstring> str1;
        zce_int16    ipreserv0;
        zce_int64    lpreserv0;
        std::vector<zce_tstring> image;
        std::vector<zce_tstring> ipaddr;
    };
    struct user_t
    {
        static user_t _empty;

        bool operator==(const user_t& _t) const noexcept
        {
            if (!(basic == _t.basic)) return false;
            if (!(extra == _t.extra)) return false;
            return true;
        }

        simpinfo_t    basic;
        userextra_t    extra;
    };
    struct prop_t
    {
        static prop_t _empty;

        bool operator==(const prop_t& _t) const noexcept
        {
            if (propid != _t.propid) return false;
            if (propname != _t.propname) return false;
            if (price != _t.price) return false;
            if (score != _t.score) return false;
            if (rscore != _t.rscore) return false;
            if (flag != _t.flag) return false;
            return true;
        }

        zce_uint32    propid;
        std::vector<zce_tstring> propname;
        zce_uint32    price;
        zce_uint32    score;
        zce_uint32    rscore;
        zce_uint64    flag;
    };
    struct nameval_t
    {
        static nameval_t _empty;

        bool operator==(const nameval_t& _t) const noexcept
        {
            if (name != _t.name) return false;
            if (value != _t.value) return false;
            return true;
        }

        std::vector<zce_tstring> name;
        std::vector<zce_tstring> value;
    };
    struct ua_basic_t
    {
        static ua_basic_t _empty;

        bool operator==(const ua_basic_t& _t) const noexcept
        {
            if (iid != _t.iid) return false;
            if (uid != _t.uid) return false;
            if (pid != _t.pid) return false;
            if (peerage != _t.peerage) return false;
            if (level != _t.level) return false;
            if (headimg != _t.headimg) return false;
            if (secflag != _t.secflag) return false;
            if (trustdev != _t.trustdev) return false;
            if (pidstar != _t.pidstar) return false;
            if (flagandgender != _t.flagandgender) return false;
            if (broadbanlevel != _t.broadbanlevel) return false;
            if (resvflag != _t.resvflag) return false;
            if (service != _t.service) return false;
            if (flags != _t.flags) return false;
            if (userid != _t.userid) return false;
            if (sid != _t.sid) return false;
            if (nick != _t.nick) return false;
            if (image != _t.image) return false;
            if (cell != _t.cell) return false;
            if (sign != _t.sign) return false;
            if (memo != _t.memo) return false;
            if (randstr != _t.randstr) return false;
            return true;
        }

        zce_uint32    iid/*内部ID*/;
        zce_uint32    uid/*编号*/;
        zce_uint32    pid/*piupiu id*/;
        zce_int16    peerage/*piupiu 爵位*/;
        zce_int16    level/*用户级别积分*/;
        zce_int16    headimg/*头像ID, 0:自定义；1-255*/;
        zce_byte    secflag/*安全标识 ERV_USER_SECURITY_FLAG*/;
        zce_byte    trustdev/*是否手机信任登陆 ERV_USER_TRUSTDEV_FLAG*/;
        zce_byte    pidstar/*PID号码星级*/;
        zce_byte    flagandgender/*ERV_USER_SIMPINF_FALG*/;
        zce_byte    broadbanlevel/*聊天广场留言封禁等级*/;
        zce_byte    resvflag/*为对齐保留*/;
        zce_int64    service/*注册的服务*/;
        zce_int64    flags/*ERV_USER_BASIC_FALG*/;
        std::vector<zce_tstring> userid/*编号*/;
        std::vector<zce_tstring> sid/*会话IDSessionID*/;
        std::vector<zce_tstring> nick/*昵称*/;
        std::vector<zce_tstring> image/*头像*/;
        std::vector<zce_tstring> cell/*手机*/;
        std::vector<zce_tstring> sign/*个性签名*/;
        std::vector<zce_tstring> memo/*备注，多对多*/;
        std::vector<zce_tstring> randstr/*保留字符串*/;
    };
    struct notify_t
    {
        static notify_t _empty;

        bool operator==(const notify_t& _t) const noexcept
        {
            if (cmd != _t.cmd) return false;
            if (qos != _t.qos) return false;
            if (!(ns == _t.ns)) return false;
            return true;
        }

        std::vector<zce_tstring> cmd;
        zce_int64    qos;
        std::vector<zdp_base::nspair_t> ns;
    };
} //namespace zdp_comm
